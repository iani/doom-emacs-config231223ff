;;; postload/cleanup/sclang-mc.el -*- lexical-binding: t; -*-

;; (use-package! sclang
;;   :commands (sclang-start sclang-mode)
;;   :bind (("C-c M-S" . sclang-start))
;;   :init
;;   (eval-after-load 'sclang-interp
;;     '(progn
;;        ;; (message " -- eval-after-load sclang-interp -- fboundp sclang-customize: %S" (fboundp 'sclang-customize))
;;        (unless (fboundp 'sclang-customize) ;; prevent to trigger loading of `sclang.el' twice!
;;          (require 'sclang))
;;        ))
;;   :config
;;   (when (and (modulep! +tree-sitter)
;;              (modulep! :tools tree-sitter)
;;              (modulep! :tools tree-sitter-ext))
;;     ;; (message "@@ use-package @@ sclang :config — +tree-sitter")
;;     (after! evil-textobj-tree-sitter
;;       (pushnew! evil-textobj-tree-sitter-major-mode-language-alist
;;                 '(sclang-mode . "supercollider"))
;;       ;; (message "@@ use-package @@ sclang :config — evil-textobj-tree-sitter-major-mode-language-alist: %S" evil-textobj-tree-sitter-major-mode-language-alist)
;;       ))

;;   (when (and (modulep! +window_purpose) (modulep! :ui window-purpose))
;;     (after! sclang-interp
;;       ;; (message "@@ use-package @@ el-sc +el_sc set special window-purpose for: %s" sclang-post-buffer)
;;       (add-to-list 'purpose-user-name-purposes (cons sclang-post-buffer 'sc-post))
;;       (add-to-list 'purpose-user-name-purposes (cons sclang-workspace-buffer 'sc-work))
;;       ;; (add-to-list 'purpose-user-name-purposes (cons
;;       ;;                                           (concat sclang-workspace-buffer "dummy*")
;;       ;;                                           'sc-work))
;;       (purpose-compile-user-configuration) ; activates your changes
;;       ))

;;   (when (and (modulep! +mc_popup_rules) (modulep! :ui popup))
;;     (set-popup-rule! "\\(*Definitions*\\|*References*\\)"
;;                      :slot 3
;;                      :vslot 3
;;                      ;; :height 0.1
;;                      :size #'+popup-shrink-to-fit
;;                      ;; :modeline t
;;                      :select t
;;                      )
;;     )

;;   (when (modulep! :tools lookup)
;;     (set-lookup-handlers! 'sclang-mode
;;       :documentation #'sclang-find-help-in-gui
;;       ))
;;   )

;; (use-package! el-sc
;;   ;; :when (modulep! +el_sc)
;;   :after sclang
;;   ;; :init
;;   ;; « ref_el-sc-el_sc-init»
;;   :config
;;   (defun sclang-set-default-directory-of-non-file-visiting-buffers ()
;;     (unless
;;         ;; (or (local-variable-p 'default-directory)
;;         (or (buffer-file-name)
;;             (string-match "^ \\*temp\\*" (buffer-name)) ;;; without this, we kill tangling
;;             )
;;       ;; )
;;       ;; (setq default-directory el-sc-userAppSupportDir)
;;       (setq default-directory el-sc-gtags-root)
;;       ;; (message " sclang-set-default-directory-of-non-file-visiting-buffers: %s %s" (current-buffer) default-directory)
;;       ))

;;   (add-hook 'sclang-mode-hook #'sclang-set-default-directory-of-non-file-visiting-buffers)

;;   (when (and (modulep! +gtags)
;;              (modulep! :tools gtags))
;;     (when (or (modulep! :tools gtags +ggtags_in_org)
;;               (modulep! :tools gtags +helm_gtags_in_org))
;;       ;; (message "@@ use-package @@ el-sc +el_sc :config support for org-mode ")
;;       (add-to-list '+gtags-doom-lookup-ob-lang-list "sclang"))

;;     (when (modulep! :tools gtags +ggtags)
;;       ;; (message "@@ use-package @@ el-sc +el_sc :config requiring ggtags")
;;       (require 'ggtags)

;;       (add-hook 'sclang-mode-hook 'ggtags-mode) ;;; nice highlighting

;;       ;; (add-hook! 'sclang-mode-hook
;;       ;;   (defun ggtags-mode-with-fixed-gtags-root ()
;;       ;;     (setq-local ggtags-process-environment
;;       ;;                 (append ggtags-process-environment
;;       ;;                         (list (format "GTAGSROOT=%s" el-sc-gtags-root))))
;;       ;;     (message "[ggtags-mode-with-fixed-gtags-root] ggtags-process-environment: %S" ggtags-process-environment)
;;       ;;     (ggtags-mode 1)))
;;       )

;;     (when (modulep! :tools gtags +helm_gtags)
;;       (eval-after-load 'helm-gtags
;;         '(progn
;;            (defun el-sc--set-gtags-root-a (fun &optional &rest args)
;;              (if (el-sc-sclang-buffer-or-src-block-p) ;; in order to make this predicate
;;                  (let ((helm-gtags-direct-helm-completing t) ;; work, we must set this!
;;                        (process-environment (copy-sequence process-environment)))
;;                    (setenv "GTAGSROOT" el-sc-gtags-root)
;;                    ;; (setenv "GTAGSCONF" el-sc-gtags-conf) redundant
;;                    (apply fun args))
;;                (apply fun args)))
;;            (advice-add 'helm-gtags--read-tagname :around #'el-sc--set-gtags-root-a)
;;            (advice-add 'helm-gtags--tag-directory :around #'el-sc--set-gtags-root-a)
;;            (advice-add 'helm-gtags--find-tag-simple :around #'el-sc--set-gtags-root-a)
;;            ))

;;       ;; (message "@@ use-package @@ el-sc +el_sc :config requiring helm-gtags")
;;       (require 'helm-gtags)
;;       (add-hook 'sclang-mode-hook 'helm-gtags-mode) ;;; cool navigation
;;       )
;;     )
;;   )

(use-package! el-sc-tweaks
 ;; :when (and (modulep! +el_sc) (modulep! +el_sc_tweaks))
  :after el-sc
  ;; :init
  ;; « ref_el-sc-tweaks-el_sc_tweaks-init»
  ;; :config
  ;; « ref_el-sc-tweaks-el_sc_tweaks-config»
  )

(use-package! sclang-extensions
 ;; :when (modulep! +sclang_extensions)
  :after sclang
  :init
  (message "@@ use-package @@ sclang-extensions +sclang_extensions performing :init")
  :config
  (message "@@ use-package @@ sclang-extensions +sclang_extensions performing :config")

  (add-hook 'sclang-mode-hook 'sclang-extensions-mode)

  (setq sclang-run-supercollider-if-not-active? nil)

   (setq sclang-bury-post-on-start? nil)

   (define-key sclang-extensions-mode-map (kbd "C-c C-l") nil) ;; mc unset double of C-c C-f
   (define-key sclang-extensions-mode-map (kbd "C-c C-c") nil) ;; mc unset override (prefer re-mapped C-c C-d)

   ;; (advice-remove 'sclang-mode 'use-sclang-post-buffer-mode) ;;; new syntax not working
   (eval-after-load "sclang-extensions"
     '(progn
        (ad-disable-advice 'sclang-mode 'around 'use-sclang-post-buffer-mode)
        (ad-activate 'sclang-mode)))

   (if (eq company-global-modes t)
       (setq company-global-modes '(not sclang-mode))
     (if (eq (car-safe company-global-modes) 'not)
         (add-to-list 'company-global-modes 'sclang-mode t)
       (message "\n  +++++ Check company-global-modes config -- unsure how to add sclang-mode \n")
       (warn "+++++ Check company-global-modes config -- not adding sclang-mode")))

   (scl:defun-memoized scl:method-arg-info (class method-name)
     "Get the name and description of each argument for a method. "
     (let ((k (scl:ensure-non-meta-class class)))
       (or
        ;; Try class method. ;;; mc: No, try instance method doc first.
        (scl:request
         (concat "SCDoc.getMethodDoc(\"%s\", \"-%s\", false)" ;;; mc
                 ".findChild(\\METHODBODY)"
                 ".findChild(\\ARGUMENTS).children.collect{|x| "
                 "[x.text, x.findChild(\\PROSE).findChild(\\TEXT).text] "
                 "} ") k method-name)
        ;; Try instance method. ;;; mc: No, try class method doc second.
        (scl:request
         (concat "SCDoc.getMethodDoc(\"%s\", \"*%s\", false)" ;;; mc
                 ".findChild(\\METHODBODY)"
                 ".findChild(\\ARGUMENTS).children.collect{|x| "
                 "[x.text, x.findChild(\\PROSE).findChild(\\TEXT).text] " "} ")
         k method-name))))

   (defun scl:method-at-point ()
     "Return a method info for the method at point."
     (-when-let* ((class (or (scl:class-of-thing-at-point) "AbstractFunction"))
                  (method (scl:symbol-near-point)))
       ;; Try the class as is, as well as the meta-class.

       (if (s-starts-with? "Meta_" class)
           (->> (scl:all-methods class)
                (-map 'scl:method-item)
                (-remove 'null)
                (--first (equal (car it) (symbol-name method))))
         (or
          (->> (scl:all-methods class)
               (-map 'scl:method-item)
               (-remove 'null)
               (--first (equal (car it) (symbol-name method))))

          (->> (scl:all-methods (concat "Meta_" class))
               (-map 'scl:method-item)
               (-remove 'null)
               (--first (equal (car it) (symbol-name method))))))))

   ;; (require 'ob-sclang) ;; commented for testing [2022-07-04 Mo]

   (cl-defun scl:blocking-eval-string (expr &optional (timeout-ms 50))
     "Ask SuperCollider to evaluate the given string EXPR. Wait a maximum TIMEOUT-MS."
     ;; (message "expr:: %S" expr) ;;; why the hell this string has so strange properies?
     ;; (message "noPr:: %S" (substring-no-properties expr)) ;;; this is the way to go
     ;; (message "noPr:: %s" (substring-no-properties expr)) ;;; small '%s' not escaped!
     (unless (s-blank? expr)
       (let ((result nil)
             ;; -- ;;; Is this the faster solution? Don't thing so.
             ;; -- ;;; Still not sure, if it really works this way [2015-03-05 Thu].
             ;; (elapsed 0)
             ;; fmt
             )
         ;; Prevent expressions from crashing sclang.
         ;;     (setq fmt (format "{ var res; Interpreter.postCompileErrors_(false);
         ;; res = try { (%S).interpret.asCompileString } {|err| err};
         ;; Interpreter.postCompileErrors_(true);
         ;; Emacs.message(res) }.value" (substring-no-properties expr)))

         ;;         ;; SuperCollider will eval the string and then call back with the result.
         ;;         ;; We rebind Emacs' `message' action to intercept the response.
         ;;         ;; -- ;;; mc: chapeau! But VERY hard to debug!
         ;;         ;; -- ;;  There must be no intermediate message until receive!
         ;;         ;; -- ;;; cannot post at all or put something like this:
         ;;         ;; -- ;; (\"sc-res: \" + res).postln;
         ;;         (flet ((message (str &rest _) (setq result str)))
         ;;           (sclang-eval-string fmt)
         ;;           ;; Block until we receive a response or the timeout expires.
         ;;           (while (and (not result) (> timeout-ms elapsed))
         ;;             (sleep-for 0 10)
         ;;             (setq elapsed (+ 10 elapsed)))
         ;;           result)
         ;;         ;; ---

         ;; -- ;;; result can either be a syntax or an evaluation error.
         ;; -- ;;; This difference doesn't matter for the purposes here.
         ;; -- ;;; Any error should return a propper elsip nel value here.

         ;; ;; -- ;;; elegant syntax but slower?, definitely cleaner and more robust.
         (setq result (sclang-eval-sync-results-code-post-no-errors
                       (substring-no-properties expr))) ;;; no properties did the trick!

         (when (s-equals? "nil" result)
           (setq result nil))

         ;; ;;; this become redundant while sending string "nil" for exec error, too.
         ;; (when (s-contains? "ERROR:" result)
         ;;   (message "There was not a syntax but an evaluation ERROR.")
         ;;   (setq result "nil")) ;;

         ;; (message "res: %s" result)
         result
         ;; ;; ----

         )))

   (scl:defun-memoized scl:methods (class)
     "Return a list of methods implemented by CLASS."
     (unless (s-blank? class)
       (scl:request "%s.methods.collect {|m| [m.name, m.ppArgumentString, m.ownerClass] }"
                    class)))

   (defun scl:clear-all-caches ()
     (interactive)
     (setq scl:methods-cache (make-hash-table :test 'equal))
     (setq scl:all-methods-cache (make-hash-table :test 'equal))
     (setq scl:instance-vars-cache (make-hash-table :test 'equal))
     (setq scl:class-vars-cache (make-hash-table :test 'equal))
     (setq scl:superclasses-cache (make-hash-table :test 'equal))
     (setq scl:subclasses-cache (make-hash-table :test 'equal))
     (setq scl:class-summary-cache (make-hash-table :test 'equal))
     )

   (defun scl:class-of-thing-at-point ()
     "Return the class of the sclang expression at point."
     (scl:logged
       ;; Find the first sclang token in the expression.
       (let* ((words
               (-map 's-trim
                     (-> (buffer-substring-no-properties
                          (scl:expression-start-pos)
                          (point))
                         (s-trim)
                         (split-string (rx (any "."))))))
              (token (nth 0 words))
              (next  (nth 1 words)))
         ;; (message "words: %s \n  token: %s next: %s" words token next)
         (cond
          ;; Return immediately for literals.
          ((null token)                nil)
          ((s-starts-with? "[" token)  "Array")
          ((s-ends-with? "]" token)    "Array")
          ((s-starts-with? "\"" token) "String")
          ((s-ends-with? "\"" token)   "String")
          ((s-starts-with? "\\" token) "Symbol")
          ((s-starts-with? "'" token)  "Symbol")
          ;; ((s-starts-with? "~" token)  "Buffer") ;;; mc: Buffer???, no it's a var!
          ((and (s-numeric? token)
                next
                (s-numeric? next)      "Float"))
          ((s-numeric? token)          "Integer")
          ;; Evaluate with SuperCollider.
          (t
           (-when-let (response (scl:class-of token)) ;;; if nil body not evaluated
             ;; (message "token response %s" response)
             response))))))
   )

(use-package! ox-sc
 ;; :when (and (modulep! +el_sc) (modulep! +ox_sc)) ;
  :after el-sc
  ;; :init
  ;; « ref_ox-sc-ox_sc-init»
  ;; :config
  ;; « ref_ox-sc-ox_sc-config»
  )

(use-package! org-sc
 ;; :when (modulep! +org_sc)
  :after sclang
  ;; :init
  ;; « ref_org-sc-org_sc-init»
  ;; :config
  ;; « ref_org-sc-org_sc-config»
  )

(use-package! ob-sc
 ;; :when (and (modulep! +ob_sc) (modulep! :babel ob-hook-ctrl))
  :after sclang
  ;; :init
  ;; « ref_ob-sc-ob_sc-init»
  ;; :config
  ;; « ref_ob-sc-ob_sc-config»
  )

(eval-when! (modulep! +tree-sitter)
  (add-hook! 'sclang-mode-local-vars-hook #'tree-sitter!))
